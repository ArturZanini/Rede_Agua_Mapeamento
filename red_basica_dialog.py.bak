# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RedBasica
                                 A QGIS plugin
 This plugin fill automaticaly the geometric attributes of a line
                             -------------------
        begin                : 2016-07-20
        git sha              : $Format:%H$
        copyright            : (C) 2016 by Infinisoft
        email                : frogerio@infinisoft.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt4 import QtGui, uic, QtCore
from helper_functions import HelperFunctions

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'red_basica_dialog_base.ui'))


class RedBasicaDialog(QtGui.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(RedBasicaDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.grpNewLayer.setVisible(False)

        QtCore.QObject.connect(self.rbExistingLayer,QtCore.SIGNAL("toggled(bool)"),self.ToogleVisibleGroup)
        QtCore.QObject.connect(self.rbNewLayer,QtCore.SIGNAL("toggled(bool)"),self.ToogleVisibleGroup)


        self.buttonBox.accepted.connect(self._accept)
        self.buttonBox.rejected.connect(self.reject)
        
##        self.rbExistingLayer.toggled.connect()
##        self.rbNewLayer.toggled.connect()

    def ToogleVisibleGroup(self, _b):
        if self.rbExistingLayer.isChecked():
            self.grpExistingLayer.setVisible(True)
            self.grpNewLayer.setVisible(False)
        if self.rbNewLayer.isChecked():
            self.grpNewLayer.setVisible(True)
            self.grpExistingLayer.setVisible(False)

    def SetIface(self,iface):
        global h
        h = HelperFunctions(iface)

    def _accept(self):
        canAccept = True
        if self.rbNewLayer.isChecked():
            if self.txtLayerName.text() == "":
                canAccept = False
                h.ShowError("The name must be a non empty string")                
            
        if canAccept == True:
            self.accept()
